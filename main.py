from fastapi import FastAPI, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
import fitz  # PyMuPDF
from rapidfuzz import fuzz
import tempfile
import os
from docx import Document
from fastapi.responses import FileResponse

app = FastAPI()

# CORS setup to allow frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {"message": "PreRepeter Backend is live!"}

def extract_text_from_pdf(file_path):
    doc = fitz.open(file_path)
    text = ""
    for page in doc:
        text += page.get_text()
    return text

def extract_questions(text):
    lines = text.split('\n')
    questions = [line.strip() for line in lines if len(line.strip()) > 30]
    return questions

def find_repeated_questions(questions):
    repeated = []
    seen = set()
    for i in range(len(questions)):
        for j in range(i + 1, len(questions)):
            if fuzz.ratio(questions[i], questions[j]) > 85:
                if questions[i] not in seen:
                    repeated.append(questions[i])
                    seen.add(questions[i])
                break
    return repeated

def create_docx(questions, output_path):
    doc = Document()
    doc.add_heading('Repeated Questions (Generated by preRepeter)', 0)
    for i, q in enumerate(questions, 1):
        doc.add_paragraph(f"{i}. {q}")
    doc.save(output_path)

@app.post("/upload/")
async def upload_pdfs(files: list[UploadFile] = File(...)):
    all_questions = []

    for file in files:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
            tmp.write(await file.read())
            tmp.flush()
            text = extract_text_from_pdf(tmp.name)
            questions = extract_questions(text)
            all_questions.extend(questions)
            os.unlink(tmp.name)

    repeated = find_repeated_questions(all_questions)

    output_path = "repeated_questions.docx"
    create_docx(repeated, output_path)

    return FileResponse(
        output_path,
        media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        filename=output_path
    )
